{"ast":null,"code":"var _jsxFileName = \"/Users/blakestewart/Documents/GitHub/weather-app/src/app.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // Import React and the useState hook\nimport './app.css'; // Import global styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // React state to hold the city input, weather data, loading state, and error message\n  const [city, setCity] = useState(''); // Stores the city name input by the user\n  const [weather, setWeather] = useState(null); // Stores fetched weather data\n  const [loading, setLoading] = useState(false); // Tracks loading state\n  const [error, setError] = useState(''); // Stores error messages\n\n  const API_KEY = process.env.REACT_APP_API_KEY; // Your OpenWeatherMap API key\n\n  // Function that runs when the form is submitted\n  const getWeather = async e => {\n    e.preventDefault(); // Prevent form from reloading the page\n\n    const cleanCity = city.trim(); // Trim whitespace from input\n    if (!cleanCity) return; // If empty, exit\n\n    setLoading(true); // Start loading\n    setError(''); // Clear old errors\n    setWeather(null); // Clear old weather data\n\n    try {\n      // Make API request to OpenWeatherMap\n      const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(cleanCity)}&appid=${API_KEY}&units=metric`);\n      const data = await res.json(); // Parse JSON response\n      console.log(data); // Log data for debugging\n\n      if (data.cod !== 200) {\n        throw new Error(data.message); // Throw error if city is not found\n      }\n      setWeather(data); // Save the weather data to state\n    } catch (err) {\n      setError(err.message || 'Error fetching data'); // Handle errors\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83C\\uDF24\\uFE0F Weather Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getWeather,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter city name\",\n        value: city,\n        onChange: e => setCity(e.target.value) // Update city state on input change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }, this), \" // Show loading message\", error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this), \" // Show error message\", weather && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weather.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", weather.main.temp, \" \\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", weather.main.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind: \", weather.wind.speed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uP3kmBFjeeYOONjlCVf+z9r4TgY=\");\n_c = App;\nexport default App; // Export the App component\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","city","setCity","weather","setWeather","loading","setLoading","error","setError","API_KEY","process","env","REACT_APP_API_KEY","getWeather","e","preventDefault","cleanCity","trim","res","fetch","encodeURIComponent","data","json","console","log","cod","Error","message","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","name","description","main","temp","humidity","wind","speed","_c","$RefreshReg$"],"sources":["/Users/blakestewart/Documents/GitHub/weather-app/src/app.js"],"sourcesContent":["import React, { useState } from 'react'; // Import React and the useState hook\nimport './app.css'; // Import global styles\n\nfunction App() {\n  // React state to hold the city input, weather data, loading state, and error message\n  const [city, setCity] = useState(''); // Stores the city name input by the user\n  const [weather, setWeather] = useState(null); // Stores fetched weather data\n  const [loading, setLoading] = useState(false); // Tracks loading state\n  const [error, setError] = useState(''); // Stores error messages\n\n  const API_KEY = process.env.REACT_APP_API_KEY; // Your OpenWeatherMap API key\n\n  // Function that runs when the form is submitted\n  const getWeather = async (e) => {\n    e.preventDefault(); // Prevent form from reloading the page\n\n    const cleanCity = city.trim(); // Trim whitespace from input\n    if (!cleanCity) return; // If empty, exit\n\n    setLoading(true); // Start loading\n    setError(''); // Clear old errors\n    setWeather(null); // Clear old weather data\n\n    try {\n      // Make API request to OpenWeatherMap\n      const res = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(cleanCity)}&appid=${API_KEY}&units=metric`\n      );\n\n      const data = await res.json(); // Parse JSON response\n      console.log(data); // Log data for debugging\n\n      if (data.cod !== 200) {\n        throw new Error(data.message); // Throw error if city is not found\n      }\n\n      setWeather(data); // Save the weather data to state\n    } catch (err) {\n      setError(err.message || 'Error fetching data'); // Handle errors\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n\n  return (\n    <div className=\"App\"> {/* Main container */}\n      <h1>üå§Ô∏è Weather Dashboard</h1>\n\n      {/* Search form */}\n      <form onSubmit={getWeather}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter city name\"\n          value={city}\n          onChange={(e) => setCity(e.target.value)} // Update city state on input change\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {/* Conditional rendering based on state */}\n      {loading && <p>Loading...</p>} // Show loading message\n      {error && <p className=\"error\">{error}</p>} // Show error message\n\n      {/* Show weather card only if data is available */}\n      {weather && (\n        <div className=\"weather-card\">\n          <h2>{weather.name}</h2> {/* City name */}\n          <p>{weather.weather[0].description}</p> {/* Weather description */}\n          <p>Temperature: {weather.main.temp} ¬∞C</p>\n          <p>Humidity: {weather.main.humidity}%</p>\n          <p>Wind: {weather.wind.speed} m/s</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App; // Export the App component\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}